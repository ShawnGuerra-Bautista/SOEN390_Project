apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'


if (!rootProject.optimizeForDevelopment) {
    apply from: '../gradle/plugins/checkstyle-android.gradle'
    apply from: '../gradle/plugins/findbugs-android.gradle'
}


jacoco {
    toolVersion = "0.8.3"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true

    excludes += ['**/k9/account/**', '**/k9/autocrypt/**', '**/k9/cache/**', '**/k9/crypto/**', '**/k9/helper/**',
                 '**/k9/power/**', '**/k9/preferences/**', '**/k9/remotecontrol/**', '**/k9/search/**',
                 '**/k9/service/**', '**/k9/setup/**', '**/k9/widget/**', '**/AccountStats.*', '**/BaseAccount.*',
                 '**/Clock.*', '**/EmailAddressValidator.*', '**/FontSizes.*', '**/Globals.*', '**/Identity.*',
                 '**/NotificationSetting.*', '**/PRNGFixes.*', '**/Preferences.*', '**/QuietTimeChecker.*',
                 '**/Throttle.*']
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:${androidSupportLibraryVersion}"
    }
}

dependencies {
    implementation 'org.greenrobot:greendao:3.2.2'
    implementation project(':k9mail-library')
    implementation project(':plugins:HoloColorPicker')
    implementation project(':plugins:openpgp-api-lib:openpgp-api')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:${kotlinVersion}"
    implementation "com.squareup.okio:okio:${okioVersion}"
    implementation 'commons-io:commons-io:2.4'
    implementation "com.android.support:support-v4:${androidSupportLibraryVersion}"
    implementation 'org.jsoup:jsoup:1.11.2'
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.1'
    implementation 'com.github.bumptech.glide:glide:3.6.1'
    implementation 'com.splitwise:tokenautocomplete:2.0.7'
    implementation 'de.cketti.safecontentresolver:safe-content-resolver-v14:0.9.0'
    implementation 'com.github.amlcurran.showcaseview:library:5.4.1'
    implementation 'com.squareup.moshi:moshi:1.2.0'
    implementation "com.jakewharton.timber:timber:${timberVersion}"
    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'org.apache.james:apache-mime4j-core:0.8.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.android.support.test:runner:0.5', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    // androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:3.0.1") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation 'org.jdom:jdom2:2.0.6'
    testImplementation 'org.greenrobot:greendao:3.2.2'
}

android {
    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.fsck.k9"
        testApplicationId "com.fsck.k9.tests"

        versionCode 26000
        versionName '5.600'

        minSdkVersion 23
        targetSdkVersion 27

        generatedDensities = ['mdpi', 'hdpi', 'xhdpi']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            if (project.hasProperty('storeFile')) {
                signingConfig signingConfigs.release
            }

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            applicationIdSuffix ".debug"
            //testCoverageEnabled rootProject.testCoverage // make it always cover instead
            testCoverageEnabled true

            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        htmlReport true
        textReport = true

        htmlOutput file("lint-report.html")
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/README'
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.all {
            if (project.findProperty("release") == "one") {
                include '**/Release1/**'
            }

            if (project.findProperty("release") == "two") {
                include '**/Release2/**'
            }

            if (project.findProperty("release") == "three") {
                include '**/Release3/**'
            }
        }
    }
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
